'use strict';

//Constructor Functions
const Person = function (firstName, birthYear) {
  this.firstName = firstName;
  this.birthYear = birthYear;
};

const jonas = new Person('Jonas', 1991);
console.log(jonas);

//1. New empty object is created
//2. Function is called, this is set to the newly created objected
//3. {} linked to a prototype
//4.  function automatically returns the {}

const matilla = new Person('Matilla', 1981);
const jack = new Person('Jack', 1993);

console.log(matilla, jack);
console.log(jonas instanceof Person);

//Prototypes
Person.prototype.calcAge = function () {
  console.log(2021 - this.birthYear);
};

jonas.calcAge();

console.log(jonas.__proto__);
console.log(Person.prototype.isPrototypeOf(jonas));

//.prototypeOfLinkedObjects
Person.prototype.species = 'Homo Sapiens';
console.log(jonas.species, matilla.species);
console.log(jonas.hasOwnProperty('firstName'));
console.log(jonas.hasOwnProperty('species'));


// Coding Challenge #1

/* 
1. Use a constructor function to implement a Car. A car has a make and a speed property. The speed property is the current speed of the car in km/h;
2. Implement an 'accelerate' method that will increase the car's speed by 10, and log the new speed to the console;
3. Implement a 'brake' method that will decrease the car's speed by 5, and log the new speed to the console;
4. Create 2 car objects and experiment with calling 'accelerate' and 'brake' multiple times on each of them.
DATA CAR 1: 'BMW' going at 120 km/h
DATA CAR 2: 'Mercedes' going at 95 km/h
GOOD LUCK ðŸ˜€
*/

const Car = function (make, speed) {
  this.make = make;
  this.speed = speed;
};

Car.prototype.accelerate = function () {
  console.log(+this.speed + 10);
};

Car.prototype.brake = function () {
  console.log(this.speed - 5);
};
const BMW = new Car('BMW', 120);
console.log(BMW);
const Mercedes = new Car('Mercedes', 95);

BMW.brake();
Mercedes.accelerate();

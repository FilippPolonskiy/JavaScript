const friend1 = 'Michael';
const friend2 = 'Steven';
const friend3 = 'Peter';

const friends = ['Michael', 'Steven', 'Peter'];
console.log(friends[0]);

//Add elements
const years = new Array(1991, 1992, 1993, 1994);
years.push(2024);
console.log(years);
years.unshift('Josh');
console.log(years);

//remove last element
years.pop();
console.log(years);
const popped = years.pop();
console.log(popped)

//remove first element
years.shift();
console.log(years)

//find the index of element in the array
console.log(years.indexOf(1993));
//is the element present in the array
console.log(years.includes(1992));

if (years.includes(1992){
    console.log(`it's present`)

//MAP Method
const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

const euroToUds = 1.1;

// const movementsUsd = movements.map(function (mov) {
//   return mov * euroToUds;
// });

// console.log(movements);

const movementsUsd = movements.map(mov => mov * euroToUds);
console.log(movementsUsd);

const movementDescrptions = movements.map((mov, i) => {
  console.log(
    `Movement ${i + 1}: You ${mov > 0 ? 'deposited' : 'withdrew'} ${Math.abs(
      mov
    )}`
  );
});

console.log(movementDescrptions);

//Filter Method
const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];
const deposits = movements.filter(function (mov) {
  return mov > 0;
});
console.log(deposits);

const withdrawals = movements.filter(mov => mov < 0);
console.log(withdrawals);


//Reduce Method
const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

//Accumulator = > snowball
const balance = movements.reduce(function (acc, cur, i, arr) {
  console.log(`Iteration number ${i}: ${acc}`);
  return acc + cur;
}, 0);
console.log(balance);

// reduce as an arrow function
const balance = movements.reduce((acc, cur) => acc + cur, 0);
console.log(balance);


//Maximum value
const max = movements.reduce(function (acc, mov) {
  if (acc > mov) {
    return acc;
  } else return mov;
}, movements[0]);

console.log(max);

const friend1 = 'Michael';
const friend2 = 'Steven';
const friend3 = 'Peter';

const friends = ['Michael', 'Steven', 'Peter'];
console.log(friends[0]);

//Add elements
const years = new Array(1991, 1992, 1993, 1994);
years.push(2024);
console.log(years);
years.unshift('Josh');
console.log(years);

//remove last element
years.pop();
console.log(years);
const popped = years.pop();
console.log(popped)

//remove first element
years.shift();
console.log(years)

//find the index of element in the array
console.log(years.indexOf(1993));
//is the element present in the array
console.log(years.includes(1992));

if (years.includes(1992){
    console.log(`it's present`)

//MAP Method
const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

const euroToUds = 1.1;

// const movementsUsd = movements.map(function (mov) {
//   return mov * euroToUds;
// });

// console.log(movements);

const movementsUsd = movements.map(mov => mov * euroToUds);
console.log(movementsUsd);

const movementDescrptions = movements.map((mov, i) => {
  console.log(
    `Movement ${i + 1}: You ${mov > 0 ? 'deposited' : 'withdrew'} ${Math.abs(
      mov
    )}`
  );
});

console.log(movementDescrptions);

//Filter Method
const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];
const deposits = movements.filter(function (mov) {
  return mov > 0;
});
console.log(deposits);

const withdrawals = movements.filter(mov => mov < 0);
console.log(withdrawals);


//Reduce Method
const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];

//Accumulator = > snowball
const balance = movements.reduce(function (acc, cur, i, arr) {
  console.log(`Iteration number ${i}: ${acc}`);
  return acc + cur;
}, 0);
console.log(balance);

// reduce as an arrow function
const balance = movements.reduce((acc, cur) => acc + cur, 0);
console.log(balance);


//Maximum value
const max = movements.reduce(function (acc, mov) {
  if (acc > mov) {
    return acc;
  } else return mov;
}, movements[0]);

console.log(max);



//Chaining Method

const euroToUsd = 1.1;
const totalDepositInUsd = movements
  .filter(mov => mov > 0)
  .map(mov => mov * euroToUsd)
  .reduce((acc, mov) => acc + mov, 0);

console.log(totalDepositInUsd);

//FIND method

const firstWithdrawal = movements.find(mov => mov < 0);
console.log(accounts);

const account = accounts.find(acc => (acc.owner = 'Jessica Davis'));

//Find Index
const index = accounts.findIndex(
      acc => acc.username === currentAccount.username
    );

//Some and every
console.log(movements);
//SOME method

//Equality
console.log(movements.includes(-130));

//Condition
console.log(movements.some(mov => mov === -130));

const anyDeposits = movements.some(mov => mov > 1500);
console.log(anyDeposits);

//EVERY method
console.log(account4.movements.every(mov => mov > 0));

//Separate Callback
const deposit = mov => mov > 0;
console.log(movements.some(deposit));
console.log(movements.every(deposit));
console.log(movements.filter(deposit));

//Flat method
const arr = [[1, 2, 3], [4, 5, 6], 7, 8];
console.log(arr.flat());

const arrDeep = [[[1, 2], 3], [4, [5, 6]], 7, 8];
console.log(arrDeep.flat(2));

const overallBalance = accounts
  .map(acc => acc.movements)
  .flat()
  .reduce((acc, mov) => acc + mov, 0);
console.log(overallBalance);

//Flatmap method
const overallBalance2 = accounts
  .flatMap(acc => acc.movements)
  .reduce((acc, mov) => acc + mov, 0);
console.log(overallBalance2);


//Sorting Arrays

//Strings
const owners = ['Jonas', 'Zach', 'Adam', 'Martha'];
console.log(owners.sort());

//Numbers
console.log(movements);

//Return >0 a before b (keep order)
//if return <0 b before a (switch order)

//Ascending
movements.sort((a, b) => {
  if (a > b) return 1;
  if (b > a) return -1;
});

//Below is the same
movements.sort((a, b) => a - b);

//Descending
movements.sort((a, b) => {
  if (a > b) return -1;
  if (b > a) return 1;
});

//Below is the same
movements.sort((a, b) => b - a);


/* 
Coding Challenge #2
Let's go back to Julia and Kate's study about dogs. This time, they want to convert dog ages to human ages and calculate the average age of the dogs in their study.
Create a function 'calcAverageHumanAge', which accepts an arrays of dog's ages ('ages'), and does the following things in order:
1. Calculate the dog age in human years using the following formula: if the dog is <= 2 years old, humanAge = 2 * dogAge. If the dog is > 2 years old, humanAge = 16 + dogAge * 4.
2. Exclude all dogs that are less than 18 human years old (which is the same as keeping dogs that are at least 18 years old)
3. Calculate the average human age of all adult dogs (you should already know from other challenges how we calculate averages ðŸ˜‰)
4. Run the function for both test datasets
TEST DATA 1: [5, 2, 4, 1, 15, 8, 3]
TEST DATA 2: [16, 6, 10, 5, 6, 1, 4]
GOOD LUCK ðŸ˜€
*/

const calcAverageHumanAge = function (dogAges) {
  const humanAge = dogAges.map(dogAge =>
    dogAge <= 2 ? 2 * dogAge : 16 + dogAge * 4
  );
  const adultHumanAge = humanAge.filter(age => age >= 18);
  const totalAdultHumanAge = adultHumanAge.reduce(
    (acc, humanAge) => acc + humanAge,
    0
  );
  const average = totalAdultHumanAge / adultHumanAge.length;
  return average;
};


/* 
Rewrite the 'calcAverageHumanAge' function from the previous challenge, but this time as an arrow function, and using chaining!
TEST DATA 1: 
TEST DATA 2: [16, 6, 10, 5, 6, 1, 4]
GOOD LUCK ðŸ˜€
*/

const calcAverageHumanAge = ages =>
  ages
    .map(age => (age <= 2 ? 2 * age : 16 + age * 4))
    .filter(age => age >= 18)
    .reduce((acc, age, i, arr) => acc + age / arr.length, 0);
// adults.length
const avg1 = calcAverageHumanAge([5, 2, 4, 1, 15, 8, 3]);
const avg2 = calcAverageHumanAge([16, 6, 10, 5, 6, 1, 4]);
console.log(avg1, avg2);
